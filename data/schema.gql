# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResult {
  token: String!
  user: User!
}

type Change implements Node {
  id: ID!
  kind: ChangeKind!
  targetEntityName: String!
  targetId: String
  targetColumn: String
  newColumnValue: String
  createdAt: DateTime!
}

enum ChangeKind {
  INSERT
  UPDATE
  REMOVE
}

type CountResult {
  count: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Language implements Node {
  id: ID!
  name: String!
  languageCode: String
  countryCode: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LanguageInput {
  name: String!
  languageCode: String!
  countryCode: String!
}

type Mutation {
  addLanguage(input: LanguageInput!): Language!
  updateUser(input: UserInput!, id: ID!): User
  deleteUser(id: ID!): CountResult!
  getOrAddUserRole(input: UserRoleInput!): UserRole!
  registerUser(password: String!, username: String!): AuthResult!
  saveTriviaQuestion(input: TriviaQuestionInput!): TriviaQuestion!
  verifyTriviaQuestions(ids: [String!]!): CountResult!
  removeTriviaQuestions(ids: [String!]!): CountResult!
  categorizeTriviaQuestions(categoryId: String!, ids: [String!]!): CountResult!
  importLegacyTriviaQuestions(input: [TriviaQuestionLegacyInput!]!): CountResult!
  saveTriviaCategory(input: TriviaCategoryInput!): TriviaCategory!
  verifyTriviaCategories(ids: [String!]!): CountResult!
  removeTriviaCategories(ids: [String!]!): CountResult!
  reportTriviaQuestion(input: TriviaReportInput!): TriviaReport!
}

interface Node {
  id: ID!
}

input NodeRef {
  id: ID!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  count: Int!
}

type Query {
  language(id: ID!): Language
  languages: [Language!]!
  changes: [Change!]!
  user(id: ID!): User
  users: [User!]!
  currentUser: User
  userRole(id: ID!): UserRole
  userRoles: [UserRole!]!
  authenticate(password: String!, username: String!): AuthResult!
  triviaQuestion(id: ID!): TriviaQuestion
  triviaQuestions(dangling: Boolean, reported: Boolean, disabled: Boolean, verified: Boolean, search: String, sortField: String, sortDirection: SortDirection = ASC, before: String, after: String, first: Int, last: Int): TriviaQuestionConnection!
  triviaCategory(id: ID!): TriviaCategory
  triviaCategories(disabled: Boolean, verified: Boolean): [TriviaCategory!]!
  triviaReport(id: ID!): TriviaReport
  triviaReports: [TriviaReport!]!
  triviaCounts: TriviaCounts!
}

enum SortDirection {
  ASC
  DESC
}

type Subscription {
  newChange(kind: ChangeKind, targetEntityName: String, targetId: String, targetColumn: String): Change!
}

type TriviaCategory implements Node {
  id: ID!
  name: String!
  description: String
  submitter: String
  verified: Boolean
  disabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  questions: [TriviaQuestion!]
}

input TriviaCategoryInput {
  id: ID
  name: String!
  description: String
  submitter: String
}

type TriviaCounts {
  questionsCount: Float!
  unverifiedQuestionsCount: Float!
  categoriesCount: Float!
  unverifiedCategoriesCount: Float!
  reportsCount: Float!
  reportedQuestionsCount: Float!
  danglingQuestionsCount: Float!
}

type TriviaQuestion implements Node {
  id: ID!
  question: String!
  answer: String!
  hint1: String
  hint2: String
  submitter: String
  verified: Boolean
  disabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Float!
  category: TriviaCategory!
  language: Language!
  submitterUser: User
  updatedBy: User
  reports: [TriviaReport!]
}

type TriviaQuestionConnection {
  edges: [TriviaQuestionEdge!]!
  pageInfo: PageInfo!
}

type TriviaQuestionEdge {
  node: TriviaQuestion!
  cursor: String!
}

input TriviaQuestionInput {
  id: ID
  question: String!
  answer: String!
  category: NodeRef!
  language: NodeRef!
  hint1: String
  hint2: String
  submitter: String
}

input TriviaQuestionLegacyInput {
  question: String!
  answer: String!
  category: String!
  language: String!
  hint1: String
  hint2: String
  submitter: String
  verified: Boolean!
  disabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TriviaReport implements Node {
  id: ID!
  message: String!
  submitter: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  question: TriviaQuestion!
}

input TriviaReportInput {
  questionId: ID!
  message: String!
  submitter: String!
}

type TriviaStatistics {
  questionsCount: Float!
  verifiedQuestionsCount: Float!
  categoriesCount: Float!
  verifiedCategoriesCount: Float!
  topCategories: [TriviaCategory!]!
  topSubmitters: [String!]!
  submissionDates: [DateTime!]!
}

type User implements Node {
  id: ID!
  username: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  roles: [UserRole!]!
}

input UserInput {
  username: String!
  password: String!
}

type UserRole implements Node {
  id: ID!
  name: String!
  description: String
}

input UserRoleInput {
  name: String!
}
